I"§<h3 id="vue">Vue</h3>

<p>Finished the Vue crash course. Here‚Äôs some things I learned today.</p>

<p>1.) Props inherit stuff from parents, you should not change prop variables even though you can. Data is used as the memory of the component itself.<br />
2.) When designing the component structure tree, it should be decided who should have the data and who will inherit it, this will decide what props the children should have.<br />
3.) v-model is a two way binding of user input to the form and the data of the component.<br />
4.) if you want reusable components, you should make events generic, then customize what they do at the parent component where you implement it.<br />
5.) the workflow from the tutorial prioritizes modularity. create an application with methods that work locally first(no persisting data change, only updating the instance view), and then implement the back-end (usually fake one first, like json-server), then update the methods to interface with the back-end<br />
6.) Making async requests then await promises then do something with the fetched data.<br />
7.) Router stuff</p>

<p>Moving on from the tutorial, I should make a simple application with some styling, maybe just something pretty that calls the openai API?</p>

<p>I think maybe I will work on making a pretty version of the ‚Äúwise-man‚Äù app. This will consolidate what I have learned from the tutorial in terms of organizing component structre, however, I won‚Äôt be using a back-end for it nor a router, I will just need to make a SPA with a few components. Should be an easy undertaking not taking up more than a day or two. I can even include ‚ÄúUncle‚Äù in there. It should be interesting.</p>
:ET